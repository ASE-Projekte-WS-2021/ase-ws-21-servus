name: Lint, Test, Push, Release

on:
  push:
    branches:
      - master
      - main
    tags:
      - 'v*'

jobs:
  lint:
    name: Check Code Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Check Style
        run: bash ./gradlew checkstyle --stacktrace

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Run Tests
        run: bash ./gradlew test --stacktrace

  apk:
    name: Generate APK
    needs:
      - test
      - lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build APK
        run: bash ./gradlew assembleDebug --stacktrace
      - name: Upload APK

        uses: actions/upload-artifact@v1
        with:
          name: apk
          path: app/build/outputs/apk/debug/app-debug.apk

  release:
    name: Release APK
    needs: apk
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download APK from build
        uses: actions/download-artifact@v1
        with:
          name: apk

      - name: Get Repo Name
        run: echo "REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV; echo $REPOSITORY_NAME
        shell: bash

      - name: Get Version From Tag
        run: echo "VERSION=$(echo '${{ github.ref }}' | awk -F 'refs.tags.v' '{print $2}')" >> $GITHUB_ENV; echo $VERSION
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.VERSION }}

      - name: Upload Release APK
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: apk/app-debug.apk
          asset_name: ${{ env.REPOSITORY_NAME }}-${{ env.VERSION }}-debug.apk
          asset_content_type: application/zip
